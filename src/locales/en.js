export default {
  add_book: "Add book",
  add_user: "Add User",
  add_task: "Add Task",
  alert_hero_success: "Hero created successfully",
  alert_error: "An error has occured",
  aside_slots: "Slots",
  aside_APIcall: "API Call",
  aside_catalog: "CRUD + Formkit + Pinnia",
  aside_crud: "CRUD",
  aside_form: "Formkit + Axios",
  author: "Author",
  books_cat: "Books Catalog",
  cancel: "Cancel",
  card_title: "Card Title",
  content_from_parent: "Content from parent component",
  email: "email",
  english: "English",
  example_APIcall: "API call example",
  example_card_compnet_st: "Card component code with slots",
  example_crud: "CRUD example",
  example_intro:
    "Simple CRUD in a single component. No store, no calls to a database.",
  example_slots: "Slots example",
  example_slots_firstP:
    "Here we have a card that uses slots to display the title, the content and the card footer.",
  form_intro: "Let's create a new hero using this form",
  form_heroes: "Heroes Form",
  go_back: "Go back",
  get_users: "Get users from API",
  get_users_intro: "We are going to use AXIOS to get data from fake API",
  hello: "Hello, World!",
  home: "Home",
  home_intro:
    "This small project is dedicated to learning and testing various tools and functionalities offered by Vue.js. It also serves as a sample project to showcase my approach to working with the framework. \nThe project explores concepts ranging from basic to advanced, such as components, slots, directives, state management, API integrations, and more. \nThis is an evolving project, with new features being added over time to experiment with and test.",
  home_select_lang:
    "To get started select your language at the top of the sidebar!",
  home_instructions:
    "You can then use the side navigation bar to inspect the different tests that have been performed. On the right side the interface of the selected element will be displayed. You can try it or see how it works. If you want to see an explanation about what is being tested or how it is done, you just have to click on the 'See Explanation' button.",
  how_works: "¿How does it works?",
  how_component_works: "¿How does component works?",
  how_to_use: "How to use this page",
  how_to_use_component: "How to use the component",
  languages: "Languages",
  loading: "Loading...",
  loading_books: "Loading books...",
  pinnia_exp_actions: "We are ready to create our Actions methods",
  pinnia_exp_getters:
    "We also can do the same with getters to create methods. For instance a method to return only books with discount",
  pinnia_exp_intro:
    "Let's create a CRUD to add and delete books from a catalog using some tools from previous sections, such as Formkit for handling forms, and we'll introduce a new tool: Pinia, to create a Store for centrally storing the books in the application.",
  pinnia_exp_pinnia:
    "Pinia: useBooksStore: Connects to the books store to access related data and methods. We are going to simulate fetching data from an API; for this, we will use the fetchBooks method as shown below..",
  pinnia_exp_component:
    "**Initial Load:** On mount, the book list is fetched from the store. \n**Adding Books:** Through a form, the user submits data to create a new book. The data is structured into a `payload` object and stored in the store. The form is reset after the operation. \n**Deleting Books:** An identifier (`id`) is received from a form or action. The corresponding book is removed from the store. The form is reset after the operation. \n**Visual Interface:** Reusable components such as `SimpleCard` are used to display books, and `RoutesButton` is used for navigation.",
  pinnia_exp_structure:
    "We create a Store that will contain the state, actions, and getters. If our application were larger, we could separate the state, actions, and getters into different files within the same store to make it easier to manage.",
  remove: "Remove",
  remove_book: "Remove book",
  save_changes: "Save changes",
  spanish: "Spanish",
  welcome: "Welcome",
  user: "User",
  users: "Users",
  users_list: "User's List",
  view_expl: "View Explanation",
};

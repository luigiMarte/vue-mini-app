export default {
  add_book: "Añadir Libro",
  add_user: "Agegar Usuario",
  add_task: "Añadir Tarea",
  alert_hero_success: "Heroe creado correctamente",
  alert_error: "Ha ocurrido un error",
  aside_slots: "Slots",
  aside_APIcall: "API Call",
  aside_catalog: "CRUD + Formkit + Pinnia",
  aside_crud: "CRUD",
  aside_form: "Formkit + Axios",
  author: "Autor",
  books_cat: "Catálogo de libros",
  cancel: "Cancelar",
  card_title: "Card Title",
  content_from_parent: "Content from parent component",
  email: "email",
  english: "Inglés",
  example_APIcall: "Ejemplo de llamada  a una API",
  example_card_compnet_st: "Componente Card con slots",
  example_crud: "CRUD",
  example_intro:
    "CRUD simple en un solo componente. Sin store, sin llamadas a un base de datos.",
  example_slots: "Ejemplo de uso de slots",
  example_slots_firstP:
    "Aquí tenemos una tarjeta que usa slots para mostrar el título, el contenido principal y el footer",
  form_intro: "Vamos usar este formulario para crear un heroe nuevo",
  form_heroes: "Formulario de Heroes",
  go_back: "Volver",
  get_users: "Obtener usuarios de una API",
  get_users_intro: "Vamos a usar Axios para traer datos desde un fake API",
  hello: "¡Hola, Mundo!",
  home: "Home",
  home_intro:
    "Este pequeño proyecto está dedicado a aprender y testear diferentes herramientas y funcionalidades que ofrece Vue.js. También funciona como un proyecto de muestra donde se puede ver mi manera de trabajar con el framework. \nEl proyecto experimenta con conceptos básicos hasta conceptos más avanzados: componentes, slots, directivas, gestión del estado, integraciones con APIs, etc. \nSe trata de un proyecto en crecimiento donde se irán añadiendo nuevas características que quieran probarse.",
  home_select_lang:
    "Para empezar selecciona tu idioma en la parte superior de la barra lateral!",
  home_instructions:
    'Luego puedes usar la barra de navegación lateral para inspeccionar las diferentes pruebas que se han realizado. En la parte derecha se mostrará la interfaz del elemento seleccionado. Puedes probarlo o ver como funciona. Si quieres ver una explicación sobre lo que se está probando en el mismo o como esta hecho solo tienes que hacer click en el botón "Ver Explicación".',
  how_works: "¿Cómo funciona?",
  how_component_works: "¿Cómo funciona el componente?",
  how_to_use: "Cómo usar esta página",
  how_to_use_component: "Cómo usar el componente",
  languages: "Lenguas",
  loading: "Loading...",
  loading_books: "Cargando Libros...",
  pinnia_exp_intro:
    "Vamos a hacer un CRUD para agregar y eliminar libros de un catálogo usando algunas herrmaientas de apartados anteriores, como Formkit para el uso de formularios y vamos a añadir una herrramienta nueva: Pinnia, para crear una Store donde almacenar los libros en la aplicación de manera centralizada .",
  pinnia_exp_pinnia:
    "Pinnia: useBooksStore: Conecta al store de libros para acceder a los datos y métodos relacionados. \nstoreToRefs: Desestructura el estado reactivo del store para usar las propiedades books, loading, y error directamente.",
  pinnia_exp_component:
    "Carga Inicial: Al montar, se obtiene la lista de libros desde el store. \nAgregar Libros: A través de un formulario, el usuario envía datos para crear un nuevo libro. Los datos se estructuran en un objeto payload y se almacenan en el store. El formulario se resetea después de la operación. \nEliminar Libros: Se recibe un identificador desde un formulario o acción. El libro correspondiente es eliminado del store. El formulario se resetea tras la operación. \nInterfaz Visual: Usa componentes reutilizables como SimpleCard para mostrar libros y RoutesButton para navegación.",
  remove: "Eliminar",
  remove_book: "Eliminar Libro",
  save_changes: "Guardar",
  spanish: "Español",
  welcome: "Bienvenido",
  user: "Usuario",
  users: "Usuarios",
  users_list: "Lista de Usuarios",
  view_expl: "Ver explicación",
};
